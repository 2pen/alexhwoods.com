A
B <- c(5, 8)
A*B
A%*%B
A <- matrix(rep(1, 6), nrow = 3, ncol = 2)
B <- c(3, 4)
A * B
A <- matrix(rep(1, 6), nrow = 6, ncol = 1)
A * B
eye(7)
diag(1, 5)
matrix(1, nrow = 2, ncol = 3)
A
A <- matrix(c(1:8), nrow = 4, ncol = 2)
A
solve(A)
A <- matrix(c(1:8), nrow = 2, ncol = 2)
A
solve(A)
crime <- read.csv(file.choose(), header = T)
names(crime) <- c('reported crime', 'reported violent crime', 'police funding per resident', 'graduated hs25', 'teens in hs', 'inCollege', 'graduated college25')
View(crime)
library(ggplot2)
ggplot(crime, aes(x = 'teens in hs', y = 'reported crime')) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
ylab("Crime") +
xlab("HS Perc") +
ggtitle("Linear Regression")
names(crime) <- c('reportedCrime', 'reportedVCrime', 'policeFunding', 'graduatedHS25', 'teensHS', 'inCollege', 'graduatedCollege25')
ggplot(crime, aes(x = teensHS, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
ylab("Crime") +
xlab("HS Perc") +
ggtitle("Linear Regression")
ggplot(crime, aes(x = teensHS, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
ylab("Crime") +
xlab("HS Perc") +
ggtitle("Predicting Crime Rate")
View(crime)
ggplot(crime, aes(x = policeFunding, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
ylab("Crime") +
xlab("Police Funding") +
ggtitle("Predicting Crime Rate")
lr <- lm(reportedCrime ~ policeFunding, data = crime)
lr
ggplot(crime, aes(x = policeFunding, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
geom_abline(intercept = 37, slope = -5) +
ylab("Crime") +
xlab("Police Funding") +
ggtitle("Predicting Crime Rate")
ggplot(crime, aes(x = policeFunding, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
geom_abline(intercept = 37, slope = 5) +
ylab("Crime") +
xlab("Police Funding") +
ggtitle("Predicting Crime Rate")
ggplot(crime, aes(x = policeFunding, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
geom_abline(intercept = 37, slope = 5, colour = "#0BB5FF") +
ylab("Crime") +
xlab("Police Funding") +
ggtitle("Predicting Crime Rate")
draw <- function(inter, sl) {
a<-ggplot(crime, aes(x = policeFunding, y = reportedCrime)) +
geom_point(shape=1) +
#  geom_smooth(method=lm, colour = "#0BB5FF") +
geom_abline(intercept = inter, slope = sl, colour = "#0BB5FF") +
ylab("Crime") +
xlab("Police Funding") +
ggtitle("Predicting Crime Rate")
print(a)
}
draw(37, 8)
draw(37, 10)
seq(-3, 3, .2)
lr
anim <- function() {
lapply(seq(25, 11.34, 0.5), seq(function(i) {
draw.curve(289.75, 11.34)
})
}
anim <- function() {
lapply(seq(25, 11.34, 0.5), function(i) {
draw.curve(289.75, 11.34)
})
}
anim
anim()
saveGIF(anim(), interval = .5, movie.name="~/Desktop/heart.gif")
install.packages('animation')
library(animation)
saveGIF(anim(), interval = .5, movie.name="~/Desktop/heart.gif")
anim
anim
anim()
y
anim <- function() {
lapply(seq(25, 11.34, 0.5), function(i) {
draw(289.75, 11.34)
})
}
anim()
anim <- function() {
lapply(seq(25, 11.34, -0.5), function(i) {
draw(289.75, 11.34)
})
}
anim <- function() {
lapply(seq(25, 11.34, -0.5), function(i) {
draw(289.75, 11.34)
})
}
anim()
saveGIF(anim(), interval = .5, movie.name="~/Desktop/heart.gif")
cd()
cd
dir()
saveGIF(anim(), interval = .5, movie.name="heart.gif")
anim <- function() {
lapply(seq(25, 11.34, -0.5), function(i) {
draw(289.75, i)
})
}
saveGIF(anim(), interval = .5, movie.name="heart.gif")
source('~/.active-rstudio-document')
11.34 / 289.75
289.75 / 11.34
x <- 289.75 / 11.34
x * 25
anim <- function() {
lapply(seq(25, 11.34, -0.25), function(i) {
draw(25.55115*i, i)
})
}
anim <- function() {
lapply(seq(25, 11.34, -0.1), function(i) {
draw(25.55115*i, i)
})
}
saveGIF(anim(), interval = .5, movie.name="heart.gif")
saveGIF(anim(), interval = .05, movie.name="heart.gif")
ggplot(crime, aes(x = policeFunding, y = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=lm, colour = "#0BB5FF") +
ylab("Crime") +
xlab("Police Funding") +
ggtitle("Predicting Crime Rate")
names(crime)
anova(lr)
influence(lr)
names(crime)
policeFunding, data = crime)
lr2 <- lm(reportedCrime ~ graduatedHS25 + teensHS + inCollege + graduatedCollege25 + policeFunding,
data = crime)
plot(lr2)
a <- ggplot(crime, aes(x = policeFunding, y = teenHS, z = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=(lm(reportedCrime ~ policeFunding + teenHS), colour = "#0BB5FF") +
ylab("Teens in High School") +
xlab("Police Funding") +
zlab("Crime")
ggtitle("Predicting Crime Rate")
a <- ggplot(crime, aes(x = policeFunding, y = teenHS, z = reportedCrime)) +
geom_point(shape=1) +
geom_smooth(method=(lm(reportedCrime ~ policeFunding + teenHS)), colour = "#0BB5FF") +
ylab("Teens in High School") +
xlab("Police Funding") +
zlab("Crime") +
ggtitle("Predicting Crime Rate")
a
a
names(crime)
scatterplot3d(crime$policeFunding, crime$teenHS, crime$reportedCrime, main="Testing!")
install.packages('scatterplot3d')
library(scatterplot3d)
scatterplot3d(crime$policeFunding, crime$teenHS, crime$reportedCrime, main="Testing!")
attach(crime)
len(policeFunding)
length(policeFunding)
length(teenHS)
scatterplot3d(crime$policeFunding, crime$teensHS, crime$reportedCrime, main="Testing!")
install.packages(rgl)
install.packages('rgl')
library(rgl)
plot3d(wt, disp, mpg, col="red", size=3)
plot3d(policeFunding, teensHS, reportedCrime, col="blue", size=3)
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s3d$plane3d(lr3)
s3d <- scatterplot3d(policeFunding, teensHS, reportedCrime, main="Predicting Crime")
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s3d$plane3d(lr3)
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s3d <- scatterplot3d(policeFunding, teensHS, reportedCrime, main="Predicting Crime", color = 'red')
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s3d$plane3d(lr3)
s3d$plane3d(lr3, color = 'blue')
s3d <- scatterplot3d(policeFunding, teensHS, reportedCrime, main="Predicting Crime", color = 'red',
box = FALSE, angle = 24)
s3d$plane3d(lr3)
s3d <- scatterplot3d(policeFunding, teensHS, reportedCrime, main="Predicting Crime", color = 'red',
box = FALSE, angle = 35)
s3d$plane3d(lr3)
s3d <- scatterplot3d(policeFunding, teensHS, reportedCrime, main="Predicting Crime", color = 'red',
angle = 35)
s3d$plane3d(lr3)
s3d$plane3d(lr3, lty = 'dotted')
s3d <- scatterplot3d(policeFunding, teensHS, reportedCrime, main="Predicting Crime", color = 'red',
angle = 35)
s3d$plane3d(lr3, lty = 'dotted')
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = 'red', angle = 35)
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = '#0BB5FF', angle = 35)
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s$plane3d(lr3, lty = 'dotted')
orig <- s$xyz.convert(policeFunding, teensHS, reportedCrime)
orig
plane <- s3d$xyz.convert(policeFunding, teensHS,  fitted(lr3))
plane
segments(orig$x, orig$y, plane$x, plane$y,
col = c("blue", "red")[i.negpos], lty = (2:1)[i.negpos])
i.negpos <- 1 + (resid(lr3) > 0)
segments(orig$x, orig$y, plane$x, plane$y,
col = c("blue", "red")[i.negpos], lty = (2:1)[i.negpos])
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime", angle = 35)
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s$plane3d(lr3, lty = 'dotted')
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = '#FFD700', angle = 35)
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s$plane3d(lr3, lty = 'dotted')
orig <- s$xyz.convert(policeFunding, teensHS, reportedCrime)
plane <- s3d$xyz.convert(policeFunding, teensHS,  fitted(lr3))
i.negpos <- 1 + (resid(lr3) > 0)
segments(orig$x, orig$y, plane$x, plane$y,
col = c("blue", "red")[i.negpos], lty = (2:1)[i.negpos])
segments(orig$x, orig$y, plane$x, plane$y,
col = c("54FBFF", "D8233B")[negpos], lty = (2:1)[negpos])
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = '#FFD700', angle = 35)
# adding a regression plane
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s$plane3d(lr3, lty = 'dotted')
# making it a residual plot
orig <- s$xyz.convert(policeFunding, teensHS, reportedCrime)
plane <- s3d$xyz.convert(policeFunding, teensHS,  fitted(lr3))
negpos <- 1 + (resid(lr3) > 0)
segments(orig$x, orig$y, plane$x, plane$y,
col = c("54FBFF", "D8233B")[negpos], lty = (2:1)[negpos])
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = 'silver', angle = 35)
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = 'gray', angle = 35)
# adding a regression plane
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s$plane3d(lr3, lty = 'dotted')
# making it a residual plot
orig <- s$xyz.convert(policeFunding, teensHS, reportedCrime)
plane <- s3d$xyz.convert(policeFunding, teensHS,  fitted(lr3))
negpos <- 1 + (resid(lr3) > 0)
segments(orig$x, orig$y, plane$x, plane$y,
col = c("blue", "red")[negpos], lty = (2:1)[negpos])
lr
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = '#FFD700', angle = 35)
color = 'black', angle = 35)
s <- scatterplot3d(policeFunding, teensHS, reportedCrime, pch = 20, main="Predicting Crime",
color = 'black', angle = 35)
# adding a regression plane
lr3 <- lm(reportedCrime ~ policeFunding + teensHS, data = crime)
s$plane3d(lr3, lty = 'dotted')
# making it a residual plot
orig <- s$xyz.convert(policeFunding, teensHS, reportedCrime)
plane <- s3d$xyz.convert(policeFunding, teensHS,  fitted(lr3))
negpos <- 1 + (resid(lr3) > 0)
segments(orig$x, orig$y, plane$x, plane$y,
col = c("blue", "red")[negpos], lty = (2:1)[negpos])
install.packages(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(crime)
crime
mcrime <- cor(crime)
mcrime
corrplot(mcrime)
corrplot(mcrime, method = "shade", shade.col = NA, tl.col = "black", tl.srt = 45)
clear()
ls
ls()
runif(100, min=2, max=7)
distance <- function(a, b) sqrt(sum((a-b) ^ 2))
points <- c(0,0, 0,5, 5,5, 5,0)
square <- matrix(points, nrow = 4, ncol = 2, byrow = TRUE)
square
center <- c(2.5, 2.5)
runif(100, min = 0, max = 5)
lapply(square, 1, distance)
apply(square, 1, distance)
distance(1, 3)
square
1
?apply()
apply(square, 1, distance)
apply(square, 1, distance(center))
distanceFromCenter <- function(a) {
b <- center
sqrt(sum((a-b) ^ 2))
}
apply(square, 1, distanceFromCenter)
distanceFromCenter(c(0, 2.5))
distanceFromCenter <- function(a) {
sqrt(sum((center - a) ^ 2))
}
distanceFromCenter(c(0, 2.5))
A <- matrix(c(1,2, 0,3, 5,4, 0,1), nrow = 4, ncol = 2, byrow = T)
A
A[A[,1]]
A[1]
A[A[,0] > 0]
A[A[,0] > 0]]
A[A[,0] > 0]
A[A[,0]]
A[1,]
A[,1]
A[,1] > 0
len(subset(A, A[,1] > 0))
length(subset(A, A[,1] > 0))
B <- subset(A, A[,1] > 0)
B
distanceFromCenter(A)
A[1]
A
A[1,]
A[1,6]
A[1,3]
A[0,]
A[,0]
A[1,]
distanceFromCenter(A[1,])
a <- c(1, 2)
distanceFromCenter(a)
A[,]
A
b <- apply(A, 1, distanceFromCenter)
b
b <- subset(b, b < 2)
b
length(b)
pi
runif(15*2, min=0, max=5)
t <- c(12,4,2,5,2,4)
t
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
n <- 100                          # number of points
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
A
b <- apply(A, 1, distanceFromCenter)
d <- subset(b, b < radius)
radius <- 2.5
d <- subset(b, b < radius)
num <- length(d) / length(b)
num84
num*4
n <-500                          # number of points
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
# here's how you'll test if it's in the circle.
b <- apply(A, 1, distanceFromCenter)
d <- subset(b, b < radius)
num <- length(d) / length(b)
num*4
n <-5000                          # number of points
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
# here's how you'll test if it's in the circle.
b <- apply(A, 1, distanceFromCenter)
d <- subset(b, b < radius)
num <- length(d) / length(b)
num*4
pi
n <-50000                          # number of points
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
# here's how you'll test if it's in the circle.
b <- apply(A, 1, distanceFromCenter)
d <- subset(b, b < radius)
num <- length(d) / length(b)
num*4
a <- c()
a[1] <- 5
a
a [4] <- 3
a
rm(a)
1000
10000 / 5
piVec <- c()
for (i in 1:2000) {
n <- i*5
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
b <- apply(A, 1, distanceFromCenter)
d <- subset(b, b < radius)
num <- length(d) / length(b)
piVec[i] = num*4
}
piVec[1999]
piVec
mean(piVec)
seq(1, 35, 5)
seq(5, 35, 5)
length(piVec)
i in 1:3
ind <- c(seq(5, 10000, 5))
ind
df <- data.frame(ind, piVec)
df
names(df)
names(df) <- c('ind', 'guess')
PI
Pi
Pi <- df
rm(df)
str(Pi)
library(data.table)
Pidt <- data.table(Pi)
math.abs(-4)
abs(-4)
Pidt[, error := abs(pi - guess)]
View(Pidt)
for (i in 1:2000) {
n <- i
A <- matrix(runif(n*2, min=0, max=5), nrow = n, ncol = 2, byrow = T)
b <- apply(A, 1, distanceFromCenter)
d <- subset(b, b < radius)
num <- length(d) / length(b)
piVec[i] = num*4
}
piVec[seq(1,5,1)]
ind <- seq(1, 2000)
ind
Pi <- data.frame(ind, PiVec)
Pi <- data.frame(ind, piVec)
PiDt <- data.table(Pi)
rm(Pidt)
PiDt[, error := abs(pi - guess)]
PiDt[, error := abs(pi - piVec)]
Pi <- data.frame(PiDt)
names(Pi) <- c('ind', 'guess', 'error')
View(Pi)
A
library(ggplot2)
ggplot(Pi, aes(x=ind, y=error)) +
geom_density(fill="blue", colour=NA, alpha=.2) +
geom_line(stat="identity")
ggplot(Pi, aes(x=ind, y=error)) +
geom_density(fill="blue", colour=NA, alpha=.2) +
geom_line()
Pi$error
geom_line(aes(y = error))
ggplot(Pi, aes(x=ind, y = error)) +
geom_density(fill="blue", colour=NA, alpha=.2) +
geom_line(aes(y = error))
ggplot(Pi, aes(x=ind, y = error)) +
geom_line(aes(y = error))
ggplot(Pi, aes(x=ind, y = error)) +
geom_line(colour = guess)
ggplot(Pi, aes(x=ind, y = error)) +
geom_line(colour = Pi$guess)
ggplot(Pi, aes(x=ind, y = error)) +
geom_line(colour = '#388E8E')
ggplot(Pi, aes(x=ind, y = error)) +
geom_line(colour = '#388E8E') +
ggtitle("Error") +
xlab("Sample Size") +
ylab("Error")
Points <- data.frame(A)
View(Points)
names(Points) <- c('x', 'y')
View(Points)
write.csv(Points, '~/Desktop/')
write.csv(Points, '~/Desktop/Points.csv')
View(Points)
distanceFromCenter(4.957035, 4.4149995)
v <- c(4.957035, 4.4149995)
distanceFromCenter(v)
setwd("~/Directories/alexhwoods.com/Machine Learning/Monte Carlo/")
places <- read.csv("places.csv", header = T)
View(places)
speeds <- read.csv("Speeds.csv", header = T)
View(speeds)
speeds[X = NULL]
speeds$X <- NULL
View(speeds)
places$X <- NULL
View(places)
rm(Points, Pi, OtherFielding, oldData, newData, crime, mcrime)
rm(square, b, center, columnsIWant, d, e, f, file, i)
rm(i.negpos, ind, lr, lr2, lr3, n, negpos, num, orig)
rm(ls())
ls()
rm(list = ls())
places <- read.csv("places.csv", header = T)
speeds <- read.csv("Speeds.csv", header = T)
places$X <- NULL
speeds$X <- NULL
